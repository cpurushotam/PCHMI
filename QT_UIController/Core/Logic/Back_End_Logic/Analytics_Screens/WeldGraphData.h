/**************************************************************************

      Copyright (c) Branson Ultrasonics Corporation, 1996-2023

     This program is the property of Branson Ultrasonics Corporation
     Copying of this software is expressly forbidden, without the prior
     written consent of Branson Ultrasonics Corporation.

---------------------------- MODULE DESCRIPTION ----------------------------
    WeldGraphData.h file provides graph backend data.

--------------------------- REVISION HISTORY ------------------------------
 rev1: 17/10/2023 - Initial version.
***************************************************************************/
#ifndef WELDGRAPHDATA_H
#define WELDGRAPHDATA_H

#include <QObject>
#include <QTextStream>
#include <QtCharts/QAbstractSeries>
#include <QtCharts/QAreaSeries>
#include <QtQuick/QQuickView>
#include <QtQuick/QQuickItem>
#include <QtCore/QtMath>
#include <QFile>
#include <QQmlContext>
#include <QDateTime>
#include <QTime>
#include "GraphAxisDef.h"
#include "qrandom.h"
#include <QtCharts/QXYSeries>
#include "WeldSignatureAce.h"
#include "CycleDetailsListModel.h"

class WeldGraphData : public QObject
{
    Q_OBJECT

public:
    ~WeldGraphData();
public:
    explicit WeldGraphData(QObject *parent = nullptr);
    Q_INVOKABLE int appendSamples(QAbstractSeries* a_series, quint8 a_type);

    Q_INVOKABLE void setAxisMinParameters(QList<qreal> &a_axisVal);
    Q_INVOKABLE void setAxisMaxParameters(QList<qreal> &a_axisVal);

    Q_INVOKABLE QList<qreal> getAxisMinParameters();
    Q_INVOKABLE QList<qreal> getAxisMaxParameters();

    Q_INVOKABLE void clearGraph();
    Q_INVOKABLE void initiateWeldGraphSignature(int CycleCountValue, bool Value);
    Q_INVOKABLE bool isRequestedWeldSignatureDataAvailable(void);
    Q_INVOKABLE void requestSelectedCycleNo(int Value);
    Q_INVOKABLE bool isEmptyWeldSignatureReceived();

private:
    inline void calculateLargest(qreal &a_axisVal , qreal a_val);
    inline void calculateSmallest(qreal &a_axisVal , qreal a_val);
    void receiveWeldGraphData();

    int m_GraphPointsCount;
    QVector<QPointF> m_TimePoints ;
    QVector<QPointF> m_FreqPoints ;
    QVector<QPointF> m_PowerPoints ;
    QVector<QPointF> m_AmpPoints;
    QVector<QPointF> m_EnergyPoints;
    QVector<QPointF> m_ForcePoints;
    QVector<QPointF> m_CollapsePoints;
    QVector<QPointF> m_AbsolutePoints;
    QVector<QPointF> m_VelocityPoints;
    QVector<QPointF> m_CurrPoints;
    QVector<QPointF> m_PhasPoints;

     QVector<QPointF> m_ReqAmpPoints;

    /* Axis Parameters */
    QList<qreal> m_AxisMinParameters ;
    QList<qreal> m_AxisMaxParameters;

    int m_ActiveWelderId = -1;
    bool m_IsScreenReNavigated = false;

    WeldSignatureACE *m_WeldSignatureACE;
    CycleDetailsListModel m_CycleDetailsListModel;

    /*Holds Requested Weld Signature Data*/
    std::deque<WeldSignatureACEStruct> m_RequestedWeldSignatureData;
    pthread_mutex_t mtx;

    bool  m_IsRequestedWeldSignatureDataAvailable;
    int   m_RequestSelectedCycleNo;
    bool  m_IsLatestWeldSignatureReadRequest;
    bool  m_IsCycleCountWeldSignatureReadRequest;
    bool  m_IsEmptyWeldSignatureReceived;

    /*Signals used to notify qml screen*/
signals:
    void updateGraphInitiated();
    void updateGraphAvailable();
    void initiateNoWeldGraphSignatureSettings(WeldSignatureACE *m_WeldSignatureACE);
    void initiateWeldGraphSignatureSettings(WeldSignatureACE *m_WeldSignatureACE);

    /*Slot to be called when data update signal generated by communication thread*/
private slots:
    void OnWeldSignatureUpdated(WeldSignatureACE *AnlyticsGraphScreenWeldSignature_Obj, int WelderId);
};

#endif // WELDGRAPHDATA_H
