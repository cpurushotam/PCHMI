/**************************************************************************

      Copyright (c) Branson Ultrasonics Corporation, 1996-2023

     This program is the property of Branson Ultrasonics Corporation
     Copying of this software is expressly forbidden, without the prior
     written consent of Branson Ultrasonics Corporation.

---------------------------- MODULE DESCRIPTION ----------------------------
    DateTimeSettings.h file handles service reminder details list model
    container.
--------------------------- REVISION HISTORY ------------------------------
    rev1: 27/11/2024 - Initial version.
***************************************************************************/
#ifndef DATETIMESETTINGS_H
#define DATETIMESETTINGS_H

#include <QObject>
#include <QSettings>
#include <QDateTime>
#include <ctime>
#include "UpdateScreens.h"

class DateTimeSettings : public QObject
{
    /*Q_PROPERTY macro is used for declaring properties in classes that inherit QObject.
      Properties behave like class data members, but they have additional features accessible through the Meta-Object System.*/
    Q_OBJECT
    Q_PROPERTY(int Day READ getDay WRITE updateDay  NOTIFY dateTimeSettingsChanged)
    Q_PROPERTY(int Month READ getMonth WRITE updateMonth  NOTIFY dateTimeSettingsChanged)
    Q_PROPERTY(int Year READ getYear WRITE updateYear  NOTIFY dateTimeSettingsChanged)
    Q_PROPERTY(int Hours READ getHours WRITE updateHours  NOTIFY dateTimeSettingsChanged)
    Q_PROPERTY(int Minutes READ getMinutes WRITE updateMinutes  NOTIFY dateTimeSettingsChanged)
    Q_PROPERTY(int Seconds READ getSeconds WRITE updateSeconds  NOTIFY dateTimeSettingsChanged)
    Q_PROPERTY(int Merediem READ getMerediem WRITE updateMerediem  NOTIFY dateTimeSettingsChanged)


public:
    explicit DateTimeSettings(QObject *parent = nullptr);
    ~DateTimeSettings();

    QSettings settings;

    Q_INVOKABLE int getDateFormat(void);
    Q_INVOKABLE void setDateFormat(int Value);

    Q_INVOKABLE int getTimeFormat(void);
    Q_INVOKABLE void setTimeFormat(int Value);

    Q_INVOKABLE void onSettingsUpdated(void);
private:

    bool m_IsScreenReNavigated;
    int m_ActiveWelderId = -1;  

    int m_Day;
    int m_Day2;
    int m_Month;
    int m_Year;
    int m_Hours;
    int m_Minutes;
    int m_Seconds;
    int m_Merediem = 0;
    DATEFORMAT m_DateFormat;
    TIMEFORMAT m_TimeFormat;

    DateTimeConversion *m_DateTimeConversion;
    char *m_LiveDateTime;
    struct tm *m_Timeinfo;
    time_t m_DateTimeVal;
    QDateTime q_DateTimeVal;
    QString str_DateTimeVal;
    QString m_AMPM;

    int getDay() const;
    void updateDay(const int& Day);

    int getMonth() const;
    void updateMonth(const int& Month);

    int getYear() const;
    void updateYear(const int& Year);

    int getHours() const;
    void updateHours(const int& Hours);

    int getMinutes() const;
    void updateMinutes(const int& Minutes);

    int getSeconds() const;
    void updateSeconds(const int& Seconds);

    int getMerediem() const;
    void updateMerediem(const int& Merediem);

private:

    pthread_mutex_t mtx;

    /*Signals used to notify qml screen*/
signals:

    void dateTimeSettingsChanged();

    /*Slot to be called when data update signal generated by communication thread*/
private slots:

    void OnDateTimeSettingsUpdated(DateTimeConversion *DateTimeConversion_Obj, int WelderId);
};
#endif // DATETIMESETTINGS_H
