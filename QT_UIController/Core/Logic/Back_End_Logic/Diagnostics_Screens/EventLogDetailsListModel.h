/**************************************************************************

      Copyright (c) Branson Ultrasonics Corporation, 1996-2024

     This program is the property of Branson Ultrasonics Corporation
     Copying of this software is expressly forbidden, without the prior
     written consent of Branson Ultrasonics Corporation.

---------------------------- MODULE DESCRIPTION ----------------------------
    EventLogDetailsListModel.cpp file handles eventlog details list model.

***************************************************************************/
#ifndef EventLogDetailsListModel_H
#define EventLogDetailsListModel_H

#include <QObject>
#include <QAbstractListModel>
#include <QSettings>
#include "UpdateScreens.h"
#include "EventLogListData.h"
#include "EventLog.h"

class EventLogDetailsListModel : public QAbstractListModel
{
    /*Q_PROPERTY macro is used for declaring properties in classes that inherit QObject.
      Properties behave like class data members, but they have additional features accessible through the Meta-Object System.*/
    Q_OBJECT   

public:
    enum EventRoles
    {
        IndexRole = Qt::UserRole + 1,
        EventIdx,
        EventIdRole,
        ParameterIdRole,
        DateTimeRole,
        UserNameRole,
        OldParametersRole,
        NewParametersRole,
        SourceOfEventRole,
        PSSerialNumberRole,
        ACSerialNumberRole,
        HMISerialNumberRole,
        CommentRole,
        EventName
    };

public:
    explicit EventLogDetailsListModel(QObject *parent = nullptr);
    ~EventLogDetailsListModel();

    //QSettings - Used for application to remember its settings (window sizes and positions, options, etc.) across sessions.
    QSettings settings;

    int rowCount(const QModelIndex &parent = QModelIndex()) const override;
    QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
    QModelIndex index(int row, int column, const QModelIndex &index = QModelIndex()) const override;
    Q_INVOKABLE QVariantMap get(int index) const ;

    Q_INVOKABLE void loadEventDetailsList();
    Q_INVOKABLE QString loadLastEventLogDateTime();

    Q_INVOKABLE void selectedRowDataDisplay(int Index);

    /*List of geter API's for eventLog details subscreens*/
    EventLog* getEventLog();

protected:
    QHash<int, QByteArray> roleNames() const override;

private:

    // m_Index - Will hold the index of the current selected Event index on the HMI . To further display the info on MoreInfo popup.
    int m_Index = 0;

    /*List of get and set functions to update qml variables*/

    QList<EventLogListData*> m_ListData;

    void createNewEventDetailsList();
    void clearEventDetailsList();
    void addNewEventDetailsList(EventLogListData *CycleDetailsList);

    int m_ActiveWelderId = -1;
    EventLog *m_EventLog;

    std::deque<EventLogEntry> m_EventLogResultData;

    /*Signals used to notify qml screen*/
signals:
    void lastEvent();
    void eventDetailsListDataChanged();

    /*Slot to be called when data update signal generated by communication thread*/
private slots:
    void OnEventLogDetailsListUpdated(EventLog *EventLogDetailsResult_Obj, int WelderId);
};
#endif // EventLogDetailsListModel_H
