/**************************************************************************

      Copyright (c) Branson Ultrasonics Corporation, 1996-2024

     This program is the property of Branson Ultrasonics Corporation
     Copying of this software is expressly forbidden, without the prior
     written consent of Branson Ultrasonics Corporation.

---------------------------- MODULE DESCRIPTION ----------------------------
    This file includes horn DiagnosticUserIO screen qml variables declarations.
--------------------------- REVISION HISTORY ------------------------------
***************************************************************************/
#ifndef DiagnosticUserIO_H
#define DiagnosticUserIO_H

#include <QObject>
#include "UpdateScreens.h"
#include "IOManager.h"

class DiagnosticUserIO : public QObject
{
    /*Q_PROPERTY macro is used for declaring properties in classes that inherit QObject.
      Properties behave like class data members, but they have additional features accessible through the Meta-Object System.*/
    Q_OBJECT

    Q_PROPERTY(float AnalogOutput_1      READ getAnalogOutput_1            WRITE updateAnalogOutput_1            NOTIFY outputDataChanged)
    Q_PROPERTY(float AnalogOutput_2      READ getAnalogOutput_2            WRITE updateAnalogOutput_2            NOTIFY outputDataChanged)

    Q_PROPERTY(float AnalogInput_1      READ getAnalogInput_1              NOTIFY outputDataChanged)
    Q_PROPERTY(float AnalogInput_2      READ getAnalogInput_2              NOTIFY outputDataChanged)


public:

    explicit DiagnosticUserIO(QObject *parent = nullptr);
    Q_INVOKABLE void setDigitalOpPinFromHMI(int pinNo, bool pinVal);
    Q_INVOKABLE void sendRefreshRequest();
    Q_INVOKABLE void sendStopRequest();
    Q_INVOKABLE bool setDigitalInputs(int index);

    /*List of get and set functions to update qml variables*/

    /*Signals used to notify qml screen*/
    float getAnalogOutput_1() const;
    void updateAnalogOutput_1(float newAnalogOutput_1);

    float getAnalogOutput_2() const;
    void updateAnalogOutput_2(float newAnalogOutput_2);

    float getAnalogInput_1() const;
    float getAnalogInput_2() const;

private:

    /*List of private varibles used by methods under DiagnosticUserIO class*/
    DiagnosticDigitalInputs m_DIAGNOSTIC_USERIO_DIGINPUTS;
    DiagnosticUserIOOutputs m_DIAGNOSTIC_USERIO_DIGOUTPUTS;

    DigitalIOMgr *m_DigitalIOMgr;

    int m_ActiveWelderId = -1;

    float m_AnalogOutput_1 = 0;

    float m_AnalogOutput_2 = 0;

    float m_AnalogInput_1 = 0;

    float m_AnalogInput_2 = 0;

    /*Signals used to notify QML */
signals:
    void diagnosticUserIOChanged();
    void outputDataChanged();

    /*Slot to be called when data update signal generated by communication thread*/
private slots:
    void OnDiagnosticUserIODetailsUpdated(DigitalIOMgr *DigitalIOMgrDetailsResult_Obj, int welderId);

};

#endif // DiagnosticUserIO_H
