/**************************************************************************

      Copyright (c) Branson Ultrasonics Corporation, 1996-2023

     This program is the property of Branson Ultrasonics Corporation
     Copying of this software is expressly forbidden, without the prior
     written consent of Branson Ultrasonics Corporation.

---------------------------- MODULE DESCRIPTION ----------------------------
    UserListDetailsListModel.h file handles the user list model container.
***************************************************************************/
#ifndef UserListDetailsListModel_H
#define UserListDetailsListModel_H

#include <QObject>
#include <QAbstractListModel>
#include <QSettings>
#include "UpdateScreens.h"
#include "UserListDetailsListData.h"
#include "UserManagement.h"

class UserListDetailsListModel : public QAbstractListModel
{
    /*Q_PROPERTY macro is used for declaring properties in classes that inherit QObject.
      Properties behave like class data members, but they have additional features accessible through the Meta-Object System.*/
    Q_OBJECT
    Q_PROPERTY(bool IsChangeScreenNavigated    READ getIsChangeScreenNavigated   WRITE updateIsChangeScreenNavigated     NOTIFY isChangeScreenNavigated)


public:
    enum AlarmRoles
    {
        IndexRole = Qt::UserRole + 1,
        UserIdRole,
        AuthorityLevelRole,
        UserStatusRole,
        UserLockUnlockRole,
        DateTimeRole
    };

public:
    explicit UserListDetailsListModel(QObject *parent = nullptr);
    ~UserListDetailsListModel();

    int rowCount(const QModelIndex &parent = QModelIndex()) const override;
    QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
    QModelIndex index(int row, int column, const QModelIndex &index = QModelIndex()) const override;

    Q_INVOKABLE void isScreenReNavigated(bool Value);
    Q_INVOKABLE void loadAlarmDetailsList();

    Q_INVOKABLE void onAddUserRequest(const QString userID, const QString password, const int authorityLevel, const bool status, const bool islocked);
    Q_INVOKABLE int addUserResponseFromASC();
    Q_INVOKABLE QString addUserWarningMessages();

    Q_INVOKABLE void onModifyUserButtonClicked(const QString userID, const int authorityLevel, const bool status, const bool islocked);
    Q_INVOKABLE int modifyuserResponseFromASC();
    Q_INVOKABLE QString editUserWarningMessages();

    Q_INVOKABLE void onDeleteUserRequest(const QString userID);
    Q_INVOKABLE int deleteUserResponseFromASC();
    Q_INVOKABLE QString modifyUserWarningMessages();

    Q_INVOKABLE void onChangePasswordRequest(const QString userID, const QString password);
    Q_INVOKABLE int changePassResponseFromASC();
    Q_INVOKABLE QString changePasswordWarningMessages();
    Q_INVOKABLE void setCurrentActiveScreenUserChange(const int screen);

    bool getIsChangeScreenNavigated() const;
    void updateIsChangeScreenNavigated(bool newIsChangeScreenNavigated);

private:

    /*List of private varibles used by methods under UserListDetailsListModel class*/
    bool m_IsScreenReNavigated;

    QString m_ModifyErrorCodes;

    QString m_AddUserErrorCodes;

    QString m_EditUserErrorCodes;

    int m_ActiveWelderId = -1;

    /*Holds UserManagemangent data*/
    UserManagement *m_UserManagement;

    /*Holds User List data*/
    std::map<std::string,UserListStruct> m_UserDetailsList;

    int m_CurrentActiveScreen;

protected:
    QHash<int, QByteArray> roleNames() const override;

private:

    QList<UserListDetailsListData*> m_ListData;

    void createNewAlarmDetailsList();
    void clearAlarmDetailsList();
    void addNewAlarmDetailsList(UserListDetailsListData *AlarmDetailsList);

    pthread_mutex_t mtx;

    bool m_IsChangeScreenNavigated = false;

    /*Signals used to notify qml screen*/
signals:
    void alarmDetailsListDataChanged();
    void deleteUserResponseChanged();
    void addUserResponseChanged();
    void modifyUserResponseChanged();
    void changeUserpassResponseChanged();
    void isChangeScreenNavigated();

    /*Slot to be called when data update signal generated by communication thread*/
private slots:
    void OnUserListDetailsListUpdated(UserManagement *UserManagementScreen_Obj, int WelderId);
};
#endif // UserListDetailsListModel_H
