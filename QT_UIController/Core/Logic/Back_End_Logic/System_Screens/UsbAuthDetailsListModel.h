#ifndef UsbAuthDetailsListModel_H
#define UsbAuthDetailsListModel_H

#include <QObject>
#include <QAbstractListModel>
#include <QSettings>
#include "UpdateScreens.h"
#include "UsbAuthDetailsListData.h"
#include "USBAuthentication.h"

class UsbAuthDetailsListModel : public QAbstractListModel
{
    /*  Properties behave like class data members, but they have additional features accessible through the Meta-Object System.*/
    Q_OBJECT

public:
    enum USBDevAuthRoles
    {
        IndexRole = Qt::UserRole + 1,
        USBIndexNumRole,
        USBEnableRole,
        DeviceNameRole,
        VendorCodeRole,
        ProductCodeRole,
        SerialNumberRole,
        UsedDateRole
    };

public:
    explicit UsbAuthDetailsListModel(QObject *parent = nullptr);
    ~UsbAuthDetailsListModel();

    int rowCount(const QModelIndex &parent = QModelIndex()) const override;
    QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
    QModelIndex index(int row, int column, const QModelIndex &index = QModelIndex()) const override;

    Q_INVOKABLE void loadUSBDevDetailsList();

    Q_INVOKABLE void deRegisterTheSelectedUSBDevice(bool status , int usbDevInDEX);

    Q_INVOKABLE void deRegisterButtonClicked();
    Q_INVOKABLE void usbDeviceRegisterButtonClicked();

private:

    /*List of private varibles used by methods under UserListDetailsListModel class*/

    int m_ActiveWelderId = -1;

    /*Holds UserManagemangent data*/
    USBAuthentication *m_USBAuthentication;

    /*Holds USB List data*/
    std::deque<USBDeviceDescriptionStruct> m_UsbDeviceDescriptionData;

protected:
    QHash<int, QByteArray> roleNames() const override;

private:

    QList<UsbAuthDetailsListData*> m_ListData;

    void createNewUSBDetailsList();
    void clearUSBDetailsList();
    void addNewUSBDetailsList(UsbAuthDetailsListData *UsbAuthDetailsList);

    pthread_mutex_t mtx;

    /*Signals used to notify qml screen*/
signals:

    /*Slot to be called when data update signal generated by communication thread*/
private slots:
    void OnUSBDetailsListUpdated(USBAuthentication *USBAuthentication_Obj, int WelderId);
};

#endif // UsbAuthDetailsListModel_H
