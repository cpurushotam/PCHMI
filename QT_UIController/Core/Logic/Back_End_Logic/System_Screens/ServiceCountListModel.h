/**************************************************************************

      Copyright (c) Branson Ultrasonics Corporation, 1996-2023

     This program is the property of Branson Ultrasonics Corporation
     Copying of this software is expressly forbidden, without the prior
     written consent of Branson Ultrasonics Corporation.

---------------------------- MODULE DESCRIPTION ----------------------------
    ServiceCountListModel.h file handles service reminder details list model
    container.
--------------------------- REVISION HISTORY ------------------------------
    rev1: 03/10/2024 - Initial version.
***************************************************************************/
#ifndef SERVICECOUNTLISTMODEL_H
#define SERVICECOUNTLISTMODEL_H

#include <QObject>
#include <QAbstractListModel>
#include <QSettings>
#include "UpdateScreens.h"
#include "ServiceCountListData.h"

class ServiceCountListModel : public QAbstractListModel
{
    /*Q_PROPERTY macro is used for declaring properties in classes that inherit QObject.
      Properties behave like class data members, but they have additional features accessible through the Meta-Object System.*/
    Q_OBJECT
    Q_PROPERTY(int CounterReminder READ getCounterReminder WRITE updateCounterReminder  NOTIFY counterReminderChanged)

public:
    enum ServiceCountRoles
    {
        IndexRole = Qt::UserRole + 1,
        ServiceCountServiceNameRole,
        ServiceCountCounterRole,
        ServiceCountLimitRole,
        ServiceCountStartTimeRole,
        ServiceCountReminderMethodRole,
        ServiceCountReminderStatusRole,
        ServiceCountSnoozeDurationRole
    };

public:
    explicit ServiceCountListModel(QObject *parent = nullptr);
    ~ServiceCountListModel();

    int rowCount(const QModelIndex &parent = QModelIndex()) const override;
    QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
    QModelIndex index(int row, int column, const QModelIndex &index = QModelIndex()) const override;

    Q_INVOKABLE void isScreenReNavigated(bool Value);
    Q_INVOKABLE void loadServiceCountList();

    Q_INVOKABLE void serviceName(QString p_ServiceName);
    Q_INVOKABLE void serviceType(int p_ServiceType);
    Q_INVOKABLE void serviceCountReminder(int p_ServiceCountReminder);
    Q_INVOKABLE void month(int p_Month);
    Q_INVOKABLE void day(int p_Day);
    Q_INVOKABLE void year(int p_Year);
    Q_INVOKABLE void hours(int p_Hours);
    Q_INVOKABLE void minutes(int p_Minutes);
    Q_INVOKABLE void seconds(int p_Seconds);
    Q_INVOKABLE int indexMonth(int indexVal);
    Q_INVOKABLE int indexDay(int indexVal);
    Q_INVOKABLE int indexYear(int indexVal);
    Q_INVOKABLE int indexHours(int indexVal);
    Q_INVOKABLE int indexMinutes(int indexVal);
    Q_INVOKABLE int indexSeconds(int indexVal);

    Q_INVOKABLE void onAddSavePressed();
    Q_INVOKABLE void onEditSavePressed();
    Q_INVOKABLE void onPausePressed(QString p_ServiceName);
    Q_INVOKABLE void onResumePressed(QString p_ServiceName);
    Q_INVOKABLE void onResetPressed(QString p_ServiceName);
    Q_INVOKABLE void onDeletePressed(QString p_ServiceName);

    Q_INVOKABLE ADD_REMINDER_ERROR_CODES    getAddReminderResponse();
    Q_INVOKABLE MODIFY_REMINDER_ERROR_CODES getDeleteReminderResponse();
    Q_INVOKABLE MODIFY_REMINDER_ERROR_CODES getModifyReminderResponse();

private:

    int m_CounterReminder;
    bool m_IsScreenReNavigated;
    int m_ActiveWelderId = -1;

    ServiceManagement *m_ServiceManagement;
    std::map<int,reminderListStruct> m_ServiceReminderDetails;

    addReminderStruct m_AddReminderStruct;
    reminderPauseResumeStruct m_ReminderPauseResumeStruct;
    reminderResetStruct m_ReminderResetStruct;

    ADD_REMINDER_ERROR_CODES    m_AddReminderResponse;
    MODIFY_REMINDER_ERROR_CODES m_DeleteReminderResponse;
    MODIFY_REMINDER_ERROR_CODES m_ModifyReminderResponse;

    QString m_ServiceName;
    int m_ServiceType;
    int m_ServiceCountReminder;
    int m_Month;
    int m_Day;
    int m_Year;
    int m_Hours;
    int m_Minutes;
    int m_Seconds;

    int m_IndexMonth[10];
    int m_IndexDay[10];
    int m_IndexYear[10];
    int m_IndexHours[10];
    int m_IndexMinutes[10];
    int m_IndexSeconds[10];

    int getCounterReminder() const;
    void updateCounterReminder(const int& CounterReminder);

protected:
    QHash<int, QByteArray> roleNames() const override;

private:

    QList<ServiceCountListData*> m_ListData;

    void createNewServiceCountList();
    void clearServiceCountList();
    void addNewServiceCountList(ServiceCountListData *ServiceCountList);

    pthread_mutex_t mtx;

    /*Signals used to notify qml screen*/
signals:
    void serviceCountListDataChanged();
    void counterReminderChanged();

    /*Slot to be called when data update signal generated by communication thread*/
private slots:
    void OnServiceCountListUpdated(ServiceManagement *ServiceManagement_Obj, int WelderId);
};
#endif // SERVICECOUNTLISTMODEL_H
