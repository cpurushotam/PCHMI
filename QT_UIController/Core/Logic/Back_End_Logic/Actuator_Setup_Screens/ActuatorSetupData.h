/**************************************************************************

      Copyright (c) Branson Ultrasonics Corporation, 1996-2023

     This program is the property of Branson Ultrasonics Corporation
     Copying of this software is expressly forbidden, without the prior
     written consent of Branson Ultrasonics Corporation.

--------------------------- MODULE DESCRIPTION ----------------------------

This file contains the Actuator Setup Data related implementation

***************************************************************************/
#ifndef ACTUATORSETUPDATA_H
#define ACTUATORSETUPDATA_H

#include <QObject>
#include <stdint.h>
#include "ActuatorSetupAce.h"
#include "ActuatorSetup.h"
#include "WeldRecipeAce.h"
#include "SystemConfigurationGeneral_MB.h"
#include "StrokeLength.h"

class ActuatorSetupData : public QObject
{
    /*Q_PROPERTY macro is used for declaring properties in classes that inherit QObject*/
    Q_OBJECT
    Q_PROPERTY(float AbsolutePosition               READ getAbsolutePosition    NOTIFY actuatorSetupDataChanged)
    Q_PROPERTY(float Pressure                       READ getPressure            NOTIFY actuatorSetupDataChanged)
    Q_PROPERTY(float MaximumVelocity                READ getMaximumVelocity     NOTIFY actuatorSetupDataChanged)
    Q_PROPERTY(float ActualForce                    READ getActualForce         NOTIFY actuatorSetupDataChanged)
    Q_PROPERTY(int RecipeNumber                     READ getRecipeNumber        NOTIFY actuatorSetupDataChanged)
    Q_PROPERTY(QString RecipeName                   READ getRecipeName          NOTIFY actuatorSetupDataChanged)
    Q_PROPERTY(ACTUATOR_SETUP_OP_TYPE OperationType READ getOperationType       WRITE updateOperationType        NOTIFY actuatorSetupDataChanged)
    Q_PROPERTY(bool ScreenOpenOnHMI                 READ getScreenOpenOnHMI     WRITE updateScreenOpenOnHMI      NOTIFY actuatorSetupDataChanged)
    Q_PROPERTY(float RecipeWeldPressure             READ getRecipeWeldPressure  WRITE updateRecipeWeldPressure   NOTIFY actuatorSetupDataChanged)
    Q_PROPERTY(bool IsHornPositionOnGround          READ getIsHornPositionOnGround    NOTIFY actuatorSetupDataChanged)

    Q_PROPERTY(float StrokeLengthValue             READ getStrokeLengthValue   NOTIFY actuatorSetupDataChanged)

public:
    explicit ActuatorSetupData(QObject *parent = nullptr);
    ~ActuatorSetupData();

    /*List of get and set functions to update qml variables*/
    float getAbsolutePosition() const;
    float getPressure() const;
    float getMaximumVelocity() const;
    float getActualForce() const;
    int getRecipeNumber() const;
    QString getRecipeName() const;

    ACTUATOR_SETUP_OP_TYPE getOperationType() const;
    void updateOperationType(ACTUATOR_SETUP_OP_TYPE newOperationType);

    bool getScreenOpenOnHMI() const;
    void updateScreenOpenOnHMI(bool newScreenOpenOnHMI);

    float getRecipeWeldPressure() const;
    void updateRecipeWeldPressure(float newRecipeWeldPressure);

    Q_INVOKABLE void updateHornDownClampOnOff(bool status);
    Q_INVOKABLE void sendHornRetractRequest();
    Q_INVOKABLE void isActuatorScreenNav(bool status);

     float getStrokeLengthValue() const;

    /*Signals used to notify qml screen*/
    bool getIsHornPositionOnGround() const;

signals:
    void actuatorSetupDataChanged();

    /*Slot to be called when data update signal generated by communication thread*/
private slots:
    void OnActuatorSetupDataUpdated(ActuatorSetupACE *ActuatorSetup_Obj, WeldRecipeACE *WeldRecipeACE_Obj, SystemConfigurationGeneral_MB *SysConfgGenData_Obj, int WelderId);

private:
    /*List of private varibles used by methods under ActuatorSetupData class*/
    float m_AbsolutePosition;
    float m_Pressure;
    float m_MaximumVelocity;
    float m_ActualForce;
    ACTUATOR_SETUP_OP_TYPE m_OperationType = HORN_DOWN_OP_TYPE;
    bool m_ScreenOpenOnHMI;
    bool m_IsActuatorScreenNav = false;
    float m_RecipeWeldPressure;
    int m_RecipeNumber;
    QString m_RecipeName;
    UNIT currUnit;

    ActuatorSetupStruct m_SetupDataAct;
    ActuatorSetupACE *m_ActuatorSetupData;
    WeldRecipeACE *m_RecipeData;
    SystemConfigurationGeneral_MB *m_SystemConfigurationGeneral_MB;
    int m_ActiveWelderId = -1;
    bool m_IsHornPositionOnGround =  false;
};

#endif // ACTUATORSETUPDATA_H
