/**************************************************************************

      Copyright (c) Branson Ultrasonics Corporation, 1996-2023

     This program is the property of Branson Ultrasonics Corporation
     Copying of this software is expressly forbidden, without the prior
     written consent of Branson Ultrasonics Corporation.

---------------------------- MODULE DESCRIPTION ----------------------------
    ActiveServiceReminderDetailsListModel.h file handles alarm details list model container.
--------------------------- REVISION HISTORY ------------------------------
    rev1: 29/05/2024 - Initial version.
***************************************************************************/
#ifndef ACTIVESERVICEREMINDERDETAILSLISTMODEL_H
#define ACTIVESERVICEREMINDERDETAILSLISTMODEL_H

#include <QObject>
#include <QAbstractListModel>
#include <QSettings>
#include "UpdateScreens.h"
#include "ActiveServiceReminderDetailsListData.h"
#include "WeldResultAce.h"
#include "AlarmLog.h"
#include "AlarmNames.h"

class ActiveServiceReminderDetailsListModel : public QAbstractListModel
{
    /*Q_PROPERTY macro is used for declaring properties in classes that inherit QObject.
      Properties behave like class data members, but they have additional features accessible through the Meta-Object System.*/
    Q_OBJECT
//    Q_PROPERTY(bool IsNotificationSystemGenerated READ getIsNotificationSystemGenerated WRITE updateIsNotificationSystemGenerated NOTIFY isNotificationSystemGeneratedChanged)
//    Q_PROPERTY(int TotalActiveAlarmsWarningsNotificationsCount READ getTotalActiveAlarmsWarningsNotificationsCount  NOTIFY totalActiveAlarmsWarningsNotificationsCountChanged)

public:
    enum ServiceReminderRoles
    {
        IndexRole = Qt::UserRole + 1,
        ServiceReminderIDRole,
        ServiceReminderSubTypeRole,
        ServiceReminderIsLogRequiredRole,
        ServiceReminderServiceNameRole,
        ServiceReminderSnoozeDurationRole
    };

public:
    explicit ActiveServiceReminderDetailsListModel(QObject *parent = nullptr);
    ~ActiveServiceReminderDetailsListModel();

    int rowCount(const QModelIndex &parent = QModelIndex()) const override;
    QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
    QModelIndex index(int row, int column, const QModelIndex &index = QModelIndex()) const override;

    Q_INVOKABLE void isScreenReNavigated(bool Value);
    Q_INVOKABLE void loadActiveServiceReminderDetailsList();

    Q_INVOKABLE int getServiceReminderSubCategory(ALARM_IDS ServiceReminderID);
    Q_INVOKABLE void onSetSnoozePressed(QString ServiceName, int SnoozeDuration);

private:

    /*List of private varibles used by methods under ServiceReminder class*/
    bool m_IsScreenReNavigated;

    int m_ActiveWelderId = -1;
    /*Holds historical alarm log data*/
    AlarmMgrACE *m_ServiceReminderMgrACE;

    /*Holds active alarm data*/
    std::deque<ActiveAlarmEntry> m_ActiveServiceReminderData;

    AlarmNames m_AlarmNames;

    /*For service name reminder name extraction*/
    ServiceManagement *m_ServiceManagement;
    std::map<int,reminderListStruct> m_ServiceReminderDetails;
    reminderSnoozeStruct m_ReminderSnoozeStruct;

protected:
    QHash<int, QByteArray> roleNames() const override;

private:

    QList<ActiveServiceReminderDetailsListData*> m_ListData;

    void createNewActiveServiceReminderDetailsList();
    void clearActiveServiceReminderDetailsList();
    void addNewActiveServiceReminderDetailsList(ActiveServiceReminderDetailsListData *ActiveServiceReminderDetailsList);

    pthread_mutex_t mtx;

    /*Slot to be called when data update signal generated by communication thread*/
private slots:
    void OnActiveServiceReminderDetailsListUpdated(AlarmMgrACE *ActiveServiceReminderEventsLogScreen_Obj, ServiceManagement *ServiceManagement_Obj, int WelderId);
};
#endif // ACTIVEALARMDETAILSLISTMODEL_H
