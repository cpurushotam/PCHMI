/**************************************************************************

      Copyright (c) Branson Ultrasonics Corporation, 1996-2023

     This program is the property of Branson Ultrasonics Corporation
     Copying of this software is expressly forbidden, without the prior
     written consent of Branson Ultrasonics Corporation.

---------------------------- MODULE DESCRIPTION ----------------------------
    ActiveAlarmDetailsListModel.h file handles alarm details list model container.
--------------------------- REVISION HISTORY ------------------------------
    rev1: 29/05/2024 - Initial version.
***************************************************************************/
#ifndef ACTIVEALARMDETAILSLISTMODEL_H
#define ACTIVEALARMDETAILSLISTMODEL_H

#include <QObject>
#include <QAbstractListModel>
#include <QSettings>
#include "UpdateScreens.h"
#include "ActiveAlarmDetailsListData.h"
#include "WeldResultAce.h"
#include "AlarmLog.h"
#include "AlarmNames.h"

class ActiveAlarmDetailsListModel : public QAbstractListModel
{
    /*Q_PROPERTY macro is used for declaring properties in classes that inherit QObject.
      Properties behave like class data members, but they have additional features accessible through the Meta-Object System.*/
    Q_OBJECT
    Q_PROPERTY(bool IsNotificationSystemGenerated READ getIsNotificationSystemGenerated WRITE updateIsNotificationSystemGenerated NOTIFY isNotificationSystemGeneratedChanged)
    Q_PROPERTY(int TotalActiveAlarmsWarningsNotificationsCount READ getTotalActiveAlarmsWarningsNotificationsCount  NOTIFY totalActiveAlarmsWarningsNotificationsCountChanged)

public:
    enum AlarmRoles
    {
        IndexRole = Qt::UserRole + 1,
        AlarmIDRole,
        AlarmSubTypeRole,
        AlarmIsLogRequiredRole,
        AlarmServiceNameRole
    };

    enum EStopEventsStatus
    {
        EStopPressedEventOccurred = 0,
        EStopReleasedEventOccurred,
        EStopResetSuccess
    };

public:
    explicit ActiveAlarmDetailsListModel(QObject *parent = nullptr);
    ~ActiveAlarmDetailsListModel();

    int rowCount(const QModelIndex &parent = QModelIndex()) const override;
    QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
    QModelIndex index(int row, int column, const QModelIndex &index = QModelIndex()) const override;

    Q_INVOKABLE void isScreenReNavigated(bool Value);
    Q_INVOKABLE void loadActiveAlarmDetailsList();
    Q_INVOKABLE void reset();

    Q_INVOKABLE int getAlarmSubCategory(ALARM_IDS AlarmID);
    Q_INVOKABLE QString getAlarmTypeString(ALARM_IDS AlarmID);
    Q_INVOKABLE void onResetAlarmPressed(ALARM_IDS AlarmID);

    Q_INVOKABLE void setEstopResetRequest();
    
private:

    /*List of private varibles used by methods under RecipeLabData class*/
    bool m_IsNotificationSystemGenerated = true;
    int m_TotalActiveAlarmsWarningsNotificationsCount = 0;
    bool m_IsScreenReNavigated;

    int m_ActiveWelderId = -1;
    /*Holds historical alarm log data*/
    AlarmMgrACE *m_AlarmMgrACE;

    /*Holds active alarm data*/
    std::deque<ActiveAlarmEntry> m_ActiveAlarmData;

    AlarmNames m_AlarmNames;
    bool m_IsAlarmOccurred = false;
    bool m_IsWarningOccurred = false;
    bool m_IsNotificationOccurred = false;
    bool m_IsServiceReminderOccurred = false;

    bool m_IsEStopPressed = false;
    bool m_ResetSuccessFlag = false;

    /*For service name reminder name extraction*/
    ServiceManagement *m_ServiceManagement;
    std::map<int,reminderListStruct> m_ServiceReminderDetails;

    bool getIsNotificationSystemGenerated() const;
    void updateIsNotificationSystemGenerated(const bool& IsNotificationSystemGenerated);

    int getTotalActiveAlarmsWarningsNotificationsCount() const;

protected:
    QHash<int, QByteArray> roleNames() const override;

private:

    QList<ActiveAlarmDetailsListData*> m_ListData;

    void createNewActiveAlarmDetailsList();
    void clearActiveAlarmDetailsList();
    void addNewActiveAlarmDetailsList(ActiveAlarmDetailsListData *ActiveAlarmDetailsList);

    pthread_mutex_t mtx;

    /*Signals used to notify qml screen*/
signals:
    void totalActiveAlarmsWarningsNotificationsCountChanged();
    void isNotificationSystemGeneratedChanged();
    void activeAlarmDetailsListDataChanged();
    void activeWarningDetailsListDataChanged();
    void activeNotificationDetailsListDataChanged();
    void activeServiceReminderDetailsListDataChanged();
    void activeAlarmDetailsListEmpty();

    void eStopEventOccurred(EStopEventsStatus EventType);

    /*Slot to be called when data update signal generated by communication thread*/
private slots:
    void OnActiveAlarmDetailsListUpdated(AlarmMgrACE *ActiveAlarmEventsLogScreen_Obj, ServiceManagement *ServiceManagement_Obj, int WelderId);
};
#endif // ACTIVEALARMDETAILSLISTMODEL_H
