/**************************************************************************

      Copyright (c) Branson Ultrasonics Corporation, 1996-2024

     This program is the property of Branson Ultrasonics Corporation
     Copying of this software is expressly forbidden, without the prior
     written consent of Branson Ultrasonics Corporation.

--------------------------- MODULE DESCRIPTION ----------------------------
 Declares Event logger structure implementation.

--------------------------- REVISION HISTORY ------------------------------
 rev1: 22/03/2024 -  Initial version.

***************************************************************************/
#ifndef EVENT_LOG_STRUCTURE_H
#define EVENT_LOG_STRUCTURE_H

#include "Common_Definitions.h"
#include <cstring>
#include <string>
#include <map>

//Maximum number of event log structures (EventLogEntry) sent in one chunk
static constexpr int MAX_NUM_OF_EVENT_LOGS_IN_ONE_CHUNK = 35;

//Maximum number of event log structures (EventLogEntry) sent to HMI
static constexpr int MAX_NUM_OF_HISTORICAL_EVENT_LOGS_TO_SEND = 100;

typedef enum
{
	READ_LAST_EVENT_LOG_DATA = 1,
	READ_HISTORICAL_EVENT_LOG_DATA,
	SYNC_EVENTLOG_DATA_ON_DATETIME_FORMAT_CHANGE
}EVENT_LOG_SUB_ID;

/* Enum to define Event log IDs */
typedef enum
{
	EVENT_NONE,
	
	ESTOP_RELEASE,
	ESTOP_PRESS,
	
	USER_LOGIN, 
	USER_LOGOUT,
	USER_CREATED,
	USER_MODIFIED,
	
	HORN_SCAN_COMPLETED,
	SEEK_PERFORM,
	PART_CONTACT_PERFORM,
	CALIBRATION_COMPLETED,
		
	RECIPE_CREATED, 
	RECIPE_DELETED,
	RECIPE_SAVED,
	RECIPE_COPIED,
	RECIPE_MODIFIED,
	RECIPE_VALIDATION,
	RECIPE_RESET,
	CYCLE_COUNT_RESET,
	
	HORN_SCAN_RECIPE_MODIFIED,
	HORN_SCAN_RECIPE_RESET,
	SEEK_RECIPE_MODIFIED,
	SEEK_RECIPE_RESET,
	TEST_RECIPE_MODIFIED,
	TEST_RECIPE_RESET,

	SYSTEM_HW_CHANGED, 
	SYSTEM_CLEANED,
	SYSTEM_FACTORY_RESET,
	SYSTEM_TIME_CHANGED,
	SYSTEM_CONFIGURATION,
	SYSTEM_DB_DELETED,
	SYSTEM_LOG_DELETED,
	SYSTEM_BATT_LOW,
	SYSTEM_SW_VER_CHANGE,

	REMINDER_CREATED,
	REMINDER_MODIFIED,
	REMINDER_DELETED,
	GRAPH_SAMPLING_CHANGE,
	AUTO_SAVE_GRAPH,

	CONFIGURATION_UPGRADE,
	PROFINET_SETTINGS_UPDATE,
	
}EVENT_IDS;

extern const std::map <EVENT_IDS , std::string> EventTypeName;

// Declaration of event log message
typedef struct EventLogEntry
{
	int 		EventIndex;								/* Event Index Number */
	EVENT_IDS   EventID;                            	/* Event Identifier */
    char    	ParameterID[PARAMETERID_SIZE];          /* Parameter identifier in case a parameter was changed */
    char        DateTime[DATE_SIZE_12_HR_FORMAT];         		/* Date time stamp when event was logged in system */
    char        UserName[USER_NAME_SIZE];         		/* Logged in username when event was generated */
    char        OldParameters[BUFF_SIZE];    			/* Old value of a parameter */
    char        NewParameters[BUFF_SIZE];    			/* New value of a parameter */
    char        SourceOfEvent[INTERFACE_SOURCE_SIZE];   /* Source of event e.g., Generated by firmware or from external interfaces like HMI, Ethernet IP, OPC UA etc.*/
    char        PSSerialNumber[SERIAL_NUM_SIZE];   		/* Power supply assembly serial number */
    char        ACSerialNumber[SERIAL_NUM_SIZE];   		/* AC assembly serial number */
    char        ASCSerialNumber[SERIAL_NUM_SIZE];  		/* ASC assembly serial number */
    char        HMISerialNumber[SERIAL_NUM_SIZE];  		/* HMI assembly serial number */
    char        Comment[BUFF_SIZE_MAX];         		/* Comment to be logged for the event */
    
    EventLogEntry()
    {
    	EventIndex  = 0;
    	EventID     = EVENT_NONE;
    	memset(ParameterID,     0, sizeof(ParameterID));
    	memset(DateTime,        0, sizeof(DateTime));
    	memset(UserName,        0, sizeof(UserName));
    	memset(OldParameters,   0, sizeof(OldParameters));
    	memset(NewParameters,   0, sizeof(NewParameters));
    	memset(SourceOfEvent,   0, sizeof(SourceOfEvent));
    	memset(PSSerialNumber,  0, sizeof(PSSerialNumber));
    	memset(ACSerialNumber,  0, sizeof(ACSerialNumber));
    	memset(ASCSerialNumber, 0, sizeof(ASCSerialNumber));
    	memset(HMISerialNumber, 0, sizeof(HMISerialNumber));
    	memset(Comment,         0, sizeof(Comment));
    }
    
}__attribute__((packed)) EventLogEntry;


#endif // EVENT_LOG_STRUCTURE_H
