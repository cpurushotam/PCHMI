/**************************************************************************

      Copyright (c) Branson Ultrasonics Corporation, 1996-2024

     This program is the property of Branson Ultrasonics Corporation
     Copying of this software is expressly forbidden, without the prior
     written consent of Branson Ultrasonics Corporation.

--------------------------- MODULE DESCRIPTION ----------------------------
 Declares Alarm logger structure implementation.

--------------------------- REVISION HISTORY ------------------------------
 rev1: 28/03/2024 -  Initial version.

***************************************************************************/

#ifndef ALARM_LOG_STRUCTURE_H_
#define ALARM_LOG_STRUCTURE_H_

#include "Common_Definitions.h"
#include <cstring>
#include <string>
#include <map>
#include <stdint.h>
#include <string>

//Maximum number of alarm log structures (AlarmLogEntry) sent in one chunk
static constexpr int MAX_NUM_OF_HIST_ALARM_LOGS_IN_ONE_CHUNK = 50;

//Maximum number of alarm log structures (AlarmLogEntry) sent to HMI
static constexpr int MAX_NUM_OF_HISTORICAL_ALARM_LOGS_TO_SEND = 100;

//Maximum number of active alarm structures (ActiveAlarmEntry) sent to HMI
static constexpr int MAX_NUM_OF_ACTIVE_ALARMS_TO_SEND = 10;

typedef enum
{
	READ_LAST_ALARM_LOG_DATA = 1,
	READ_HISTORICAL_ALARM_LOG_DATA,
	READ_ACTIVE_ALARM_DATA,
	RESET_ACTIVE_ALARM,
	RESET_ALL_ACTIVE_ALARMS,
	ALARM_CONFIG_DATA,
	ALARM_CONFIG_UPDATE_RESULT,
	ALARM_CONFIG_SAVE,
	ALARM_CONFIG_RESET_TO_DEFAULT,
	ESTOP_ACTIVE_INDICATION,
	ESTOP_RESET_REQUEST,
	ESTOP_RESET_RESPONSE,
	ADD_ALARM_NOTES,
	SYNCH_ALARMSLOG_ON_DATETIME_FORMAT_CHANGE,
	HORN_CLAMP_ON_ALARM_STATUS,
}ALARM_LOG_SUB_ID;

/* Enum to define Event Alarms IDs */
typedef enum
{
	ALARM_NONE,
	
	ALARM_PHASE_OVERLOAD_OVA 	= 0x001,
	ALARM_CURR_OVERLOAD_OVA 	= 0x002,
	ALARM_FREQ_OVERLOAD_OVA 	= 0x003,
	ALARM_POWER_OVERLOAD_OVA	= 0x004,
	ALARM_VOLT_OVERLOAD_OVA 	= 0x005,
	ALARM_TEMP_OVERLOAD_OVA 	= 0x006,
	
	ALARM_EB_PHASE_OVERLOAD_OVA = 0x011, 
	ALARM_EB_CURR_OVERLOAD_OVA 	= 0x012,
	ALARM_EB_FREQ_OVERLOAD_OVA 	= 0x013,
	ALARM_EB_POWER_OVERLOAD_OVA = 0x014,
	ALARM_EB_VOLT_OVERLOAD_OVA 	= 0x015,
	ALARM_EB_TEMP_OVERLOAD_OVA 	= 0x016,
	
	ALARM_AB_PHASE_OVERLOAD_OVA = 0x021, 
	ALARM_AB_CURR_OVERLOAD_OVA 	= 0x022,
	ALARM_AB_FREQ_OVERLOAD_OVA 	= 0x023,
	ALARM_AB_POWER_OVERLOAD_OVA = 0x024,
	ALARM_AB_VOLT_OVERLOAD_OVA 	= 0x025,
	ALARM_AB_TEMP_OVERLOAD_OVA 	= 0x026,

	ALARM_POST_SEEK_PHASE_OVERLOAD_OVA 	= 0x031, 
	ALARM_POST_SEEK_CURR_OVERLOAD_OVA 	= 0x032,
	ALARM_POST_SEEK_FREQ_OVERLOAD_OVA 	= 0x033,
	ALARM_POST_SEEK_POWER_OVERLOAD_OVA 	= 0x034,
	ALARM_POST_SEEK_VOLT_OVERLOAD_OVA 	= 0x035,
	ALARM_POST_SEEK_TEMP_OVERLOAD_OVA 	= 0x036,
	
	ALARM_GND_DETECT_CMA 				= 0x303,
	ALARM_SONICS_MAX_CMA 				= 0x304,
	ALARM_NO_AMPLITUDE_STEP_CMA 		= 0x306,
	ALARM_NO_PRESSURE_STEP_CMA 			= 0x307,	
	ALARM_PEAK_POWER_CUTOFF_WRA 		= 0x31B,
	ALARM_ABSOLUTE_CUTOFF_WRA 			= 0x31C,
	ALARM_COLLAPSE_CUTOFF_WRA 			= 0x31F,
	ALARM_SONICS_DISABLE_WRA 			= 0x321,
	ALARM_FREQUENCY_LOW_CUTOFF_WRA 		= 0x326,
	ALARM_FREQUENCY_HIGH_CUTOFF_WRA 	= 0x327,
    ALARM_ENERGY_CUTOFF_WRA 			= 0x329,
	ALARM_GND_DETECT_CUTOFF_WRA 		= 0x32A,
	ALARM_TIME_CUTOFF_WRA 				= 0x32B,
	ALARM_MIN_ENERGY_COMPENSATION		= 0x32C, 
	ALARM_MAX_ENERGY_COMPENSATION		= 0x32D, 

	ALARM_TRIGGER_LOST_WRA 				= 0x401,
	ALARM_TRIGGER_LOST_HOLD 			= 0x402,
	ALARM_ACTUATOR_CLEAR_WRA 			= 0x417,
	ALARM_ACTUATOR_CAL_WRA 				= 0x41E,
	ALARM_USB_MEM_FULL_WRA 				= 0x422,
	ALARM_DISK_MEM_FULL_WRA 			= 0x423,
	ALARM_CUSTOME1_CUTOFF_WRA 			= 0x424,
	ALARM_CUSTOME2_CUTOFF_WRA 			= 0x425,
	ALARM_CUSTOME_DIGITAL_CUTOFF_WRA 	= 0x428,
	ALARM_ALARM_LOG_FULL_WRA 			= 0x445,
	ALARM_EVENT_LOG_FULL_WRA 			= 0x446,
	ALARM_WELD_RESULT_FULL_WRA 			= 0x447,
	ALARM_WELD_GRAPH_FULL_WRA 			= 0x448,
	ALARM_HORN_SCAN_FULL_WRA 			= 0x449,
	ALARM_EEPROM_SYSCONFIG_WRA 			= 0x450,
	
	ALARM_VELOCITY_LIMIT_MLR_PRA		= 0x501,
	ALARM_VELOCITY_LIMIT_PLR_PRA 		= 0x502,
	ALARM_PEAKPOWER_LIMIT_MLR_PRA 		= 0x503,
	ALARM_PEAKPOWER_LIMIT_PLR_PRA 		= 0x504,
	ALARM_TIME_LIMIT_MLR_PRA 			= 0x505,
	ALARM_TIME_LIMIT_PLR_PRA 			= 0x506,
	ALARM_ENERGY_LIMIT_MLR_PRA 			= 0x507,
	ALARM_ENERGY_LIMIT_PLR_PRA 			= 0x508,
	ALARM_COLLAPSEDIST_LIMIT_MLR_PRA 	= 0x509,
	ALARM_COLLAPSEDIST_LIMIT_PLR_PRA 	= 0x50A,
	ALARM_ABSOLUTEDIST_LIMIT_MLR_PRA 	= 0x50B,
	ALARM_ABSOLUTEDIST_LIMIT_PLR_PRA 	= 0x50C,
	ALARM_TRIGGERDIST_LIMIT_MLR_PRA 	= 0x50D,
	ALARM_TRIGGERDIST_LIMIT_PLR_PRA 	= 0x50E,
	ALARM_WELDFORCE_LIMIT_MLR_PRA 		= 0x50F,
	ALARM_WELDFORCE_LIMIT_PLR_PRA 		= 0x510,
	ALARM_FREQUENCY_LIMIT_MLR_PRA 		= 0x512,
	ALARM_FREQUENCY_LIMIT_PLR_PRA 		= 0x513,

	ALARM_ENERGY_LIMIT_MLS_PSA			= 0x551,
	ALARM_ENERGY_LIMIT_PLS_PSA 			= 0x552,
	ALARM_PEAKPOWER_LIMIT_MLS_PSA 		= 0x553,
	ALARM_PEAKPOWER_LIMIT_PLS_PSA 		= 0x554,
	ALARM_COLLAPSEDIST_LIMIT_MLS_PSA 	= 0x555,
	ALARM_COLLAPSEDIST_LIMIT_PLS_PSA 	= 0x556,
	ALARM_ABSOLUTEDIST_LIMIT_MLS_PSA 	= 0x557,
	ALARM_ABSOLUTEDIST_LIMIT_PLS_PSA 	= 0x558,
	ALARM_TRIGGERDIST_LIMIT_MLS_PSA 	= 0x559,
	ALARM_TRIGGERDIST_LIMIT_PLS_PSA 	= 0x55A,
	ALARM_WELDFORCE_LIMIT_MLS_PSA 		= 0x55B,
	ALARM_WELDFORCE_LIMIT_PLS_PSA 		= 0x55C,
	ALARM_TIME_LIMIT_MLS_PSA 			= 0x55D,
	ALARM_TIME_LIMIT_PLS_PSA 			= 0x55E,
	ALARM_VELOCITY_LIMIT_MLS_PSA 		= 0x560,
	ALARM_VELOCITY_LIMIT_PLS_PSA 		= 0x561,
	ALARM_FREQUENCY_LIMIT_MLS_PSA 		= 0x562,
	ALARM_FREQUENCY_LIMIT_PLS_PSA 		= 0x563,
	
	ALARM_START_SWITCH_CLOSED_EFA 		= 0x601,
	ALARM_ULS_STILL_ACTIVE_EFA 			= 0x602,
	ALARM_ULS_NOT_ACTIVE_HOME_EFA 		= 0x604,
	ALARM_GND_DETECT_EFA 				= 0x605,
	ALARM_START_SWITCH_LOST_EFA 		= 0x609,
	ALARM_ALARM_LOG_FULL_EFA 			= 0x611,
	ALARM_EVENT_LOG_FULL_EFA 			= 0x612,
	ALARM_WELD_RESULT_FULL_EFA 			= 0x613,
	ALARM_WELD_GRAPH_FULL_EFA 			= 0x614,
	ALARM_HORN_SCAN_FULL_EFA 			= 0x615,
	ALARM_PRETRIGGER_TIMEOUT_EFA 		= 0x620,
	ALARM_DATA_ERROR_EFA 				= 0x624,
	ALARM_ACTUATOR_RETURN_TIMEOUT_EFA	= 0x625,
	ALARM_ACTUATOR_NOVRAM_EFA 			= 0x626,
	ALARM_PS_NOVRAM_EFA 				= 0x627,
	ALARM_START_SWITCH_TIME_EFA 		= 0x628,
	ALARM_DISK_MEM_FULL_EFA 			= 0x629,
	ALARM_INTERNAL_STORAGE_FAILURE_EFA 	= 0x62A,
	ALARM_RECALIBRATE_ACTUATOR_EFA 		= 0x62F,
	ALARM_ACTUATOR_CLEAR_FUNC_EFA 		= 0x630,
	ALARM_EXT_DISK_NA_EFA 				= 0x631,
	ALARM_ACTUATOR_TYPE_CHANGED_EFA 	= 0x632,
	ALARM_SYS_PRESSURE_INCORRECT_EFA 	= 0x633,
	ALARM_PART_PRESENT_ACTIVE_EFA 		= 0x634,
	ALARM_INTERNAL_COMM_USB_EFA 		= 0x635,
	ALARM_INTERNAL_COMM_NFS_EFA 		= 0x636,
	ALARM_INTERNAL_COMM_ENET 			= 0x638,
	ALARM_INTERNAL_COMM_LINK_LOST 		= 0x639,
	ALARM_INTERNAL_COMM_CABLE_EFA 		= 0x63A,
	ALARM_PROF_ETHIP_NOT_RESP_EFA 		= 0x63B,
	ALARM_SONICS_SOURCE_LOST_EFA 		= 0x63C,
	ALARM_TRIG_ACTIVE_IN_READY_EFA 		= 0x63D,
	ALARM_BUS_SCAN_FAILURE_EFA			= 0x63E, //TODO: NO DUPLICATES!!!!
	ALARM_INTERNAL_COMM_EFA 			= 0x63E,
	ALARM_INTERNAL_COMM_KEYPAD_LOST 	= 0x63F,
	ALARM_RTC_LOW_BATT_WRA 	            = 0x640,
 	
	ALARM_ESTOP_NCA 					= 0x700,
	ALARM_SONICS_DELAY_TIMEOUT_NCA 		= 0x703,
	ALARM_PART_WINDOW_ABORT_NCA 		= 0x706,
	ALARM_PART_CONTACT_PRETRIGGER_NCA 	= 0x708,
	ALARM_LLS_ABORT_BEFORE_TRS 			= 0x709,

	ALARM_CYCLE_ABORT_NCA 						= 0x70A,
	ALARM_ABSOLUTE_DISTANCE_NCA 				= 0x70C,
	ALARM_EXTERNAL_TOOLING_LOST_NCA 			= 0x714,
	ALARM_EXTERNAL_TOOLING_TIMEOUT_NCA 			= 0x715,
	ALARM_PART_PRESENT_LOST_NCA 				= 0x716,
	ALARM_TRIGGER_TIMEOUT_NCA 					= 0x717,
	ALARM_READY_POSITION_TIMEOUT_NCA 			= 0x718,
	ALARM_RECIPE_NOT_VALID_NCA 					= 0x719,
	ALARM_POWER_SUPPLY_ASSYM_COMP_MISMATCH_NCA	= 0x720,
	ALARM_ACTUATOR_ASSYM_COMP_MISMATCH_NCA 		= 0x721,
	ALARM_STACK_ASSYM_COMP_MISMATCH_NCA 		= 0x722,
	ALARM_BATCH_COUNT_NCA 						= 0x71A,
	ALARM_RECIPE_NOT_VALIDATED_NCA 				= 0x71B,
	
	ALARM_TEST_PHASE_OVERLOAD 	= 0x841,
	ALARM_TEST_CURR_OVERLOAD 	= 0x842,
	ALARM_TEST_FREQ_OVERLOAD 	= 0x843,
	ALARM_TEST_POWER_OVERLOAD	= 0x844,
	ALARM_TEST_VOLT_OVERLOAD 	= 0x845,
	ALARM_TEST_TEMP_OVERLOAD 	= 0x846,
	
	ALARM_PRETRG_PHASE_OVERLOAD = 0x851,
	ALARM_PRETRG_CURR_OVERLOAD 	= 0x852,
	ALARM_PRETRG_FREQ_OVERLOAD 	= 0x853,
	ALARM_PRETRG_POWER_OVERLOAD	= 0x854,
	ALARM_PRETRG_VOLT_OVERLOAD 	= 0x855,
	ALARM_PRETRG_TEMP_OVERLOAD 	= 0x856,
	
	ALARM_SEEK_PHASE_OVERLOAD 	= 0x861,
	ALARM_SEEK_CURR_OVERLOAD 	= 0x862,
	ALARM_SEEK_FREQ_OVERLOAD 	= 0x863,
	ALARM_SEEK_POWER_OVERLOAD	= 0x864,
	ALARM_SEEK_VOLT_OVERLOAD 	= 0x865,
	ALARM_SEEK_TEMP_OVERLOAD 	= 0x866,
	
	ALARM_PREWELD_SEEK_PHASE_OVERLOAD 	= 0x881,
	ALARM_PREWELD_SEEK_CURR_OVERLOAD 	= 0x882,
	ALARM_PREWELD_SEEK_FREQ_OVERLOAD 	= 0x883,
	ALARM_PREWELD_SEEK_POWER_OVERLOAD	= 0x884,
	ALARM_PREWELD_SEEK_VOLT_OVERLOAD 	= 0x885,
	ALARM_PREWELD_SEEK_TEMP_OVERLOAD 	= 0x886,
	
	ALARM_POSTWELD_SEEK_PHASE_OVERLOAD 	= 0x831,
	ALARM_POSTWELD_SEEK_CURR_OVERLOAD 	= 0x832,
	ALARM_POSTWELD_SEEK_FREQ_OVERLOAD 	= 0x833,
	ALARM_POSTWELD_SEEK_POWER_OVERLOAD	= 0x834,
	ALARM_POSTWELD_SEEK_VOLT_OVERLOAD 	= 0x835,
	ALARM_POSTWELD_SEEK_TEMP_OVERLOAD 	= 0x836,

	// Safety Controller alarms
	ALARM_ELC_NO_ALARM 									= 0xE00,
	ALARM_ELC_LE_QEI_PHASE_ERROR 						= 0xE01,
	ALARM_ELC_LE_READY_QEI_MIN_DISTANCE_LIMIT 			= 0xE02,
	ALARM_ELC_LE_DRIVE_ON_QEI_POSITION_ERROR			= 0xE03,
	ALARM_ELC_LE_QEI_NOT_ZERO_POSITION 					= 0xE04,
	ALARM_ELC_LE_QEI_ZERO_POSITION 						= 0xE05,
	ALARM_ELC_PB_BOTH_DRV_ACTIVE_SAMETIME 				= 0xE06,
	ALARM_ELC_PB_EITHER_ONE_DRV_FAIL 					= 0xE07,
	ALARM_ELC_PB_PB_PRESSED_POWER_UP 					= 0xE08,
	ALARM_ELC_PB_ONE_OR_BOTH_PB_PRESSED_PREREADY 		= 0xE09,
	ALARM_ELC_PB_ONLY_ONE_PB_PRESSED_READY 				= 0xE0A,
	ALARM_ELC_PB_TWO_HAND_TIMING_NOT_SATISFIED_READY 	= 0xE0B,
	ALARM_ELC_PB_ONE_OR_BOTH_PB_RELEASED_DRIVEON 		= 0xE0C,
	ALARM_ELC_PB_STILL_PB_PRESSED_FAULT					= 0xE0D,
	ALARM_ELC_UFAIL24_SIGNAL_ERROR 						= 0xE0E,
	ALARM_ELC_ESTOP_BUTTON_ERROR 						= 0xE0F,
	ALARM_ELC_ULS_SIGNAL_ERROR 							= 0xE10,
	ALARM_ELC_SBEAM_FORCE_LIMIT 						= 0xE11,
	ALARM_ELC_TRS_SIGNAL_ERROR 							= 0xE12,
	ALARM_ELC_SVRELAY_RELAY_STATE_NOT_DRV 				= 0xE13,
	ALARM_ELC_BOARD_MISMATCH 							= 0xE14,
	ALARM_ELC_SONICS_EN_SIGNAL_ERROR 					= 0xE15,
	ALARM_ELC_BIST_REGISTER_TEST_FAIL 					= 0xE16,
	ALARM_ELC_BIST_RAMSAFEAREA_TEST_FAIL 				= 0xE17,
	ALARM_ELC_BIST_PC_TEST_FAIL 						= 0xE18,
	ALARM_ELC_BIST_RAMDATAAREA_TEST_FAIL 				= 0xE19,
	ALARM_ELC_BIST_ADC_TEST_FAIL 						= 0xE1A,
	ALARM_ELC_BIST_RAMSTACKAREA_TEST_FAIL 				= 0xE1B,
	ALARM_ELC_BIST_FLASH_TEST1_FAIL 					= 0xE1C,
	ALARM_ELC_BIST_FLASH_TEST2_FAIL 					= 0xE1D,
	ALARM_ELC_BIST_FLASH_TEST3_FAIL 					= 0xE1E,
	ALARM_ELC_BIST_FLASH_TEST4_FAIL 					= 0xE1F,
	ALARM_ELC_INCORRECT_STATUS							= 0xE20,

	// Interface Controller alarms
	ALARM_ELC_VARIANT_DETECTION_FAIL 					= 0xE21,
	ALARM_ELC_LINEAR_ENCODER_FAULT 						= 0xE22,
	ALARM_ELC_PRESSURE_REGULATOR_FAULT 					= 0xE23,
	ALARM_ELC_SAFETY_MICRO_FAULT						= 0xE24,
	ALARM_ELC_AC_EEPROM_FAULT 							= 0xE25,
	ALARM_ELC_INCORRECT_ASC_FRAME 						= 0xE26,
	ALARM_ELC_ASC_TIMEOUT 								= 0xE27,
	ALARM_ELC_GDS_ACTIVE_POWERUP 						= 0xE28,
	ALARM_ELC_ULS_INACTIVE_POWERUP 						= 0xE29,
	ALARM_ELC_TRS_ACTIVE_POWERUP						= 0xE2A,
	ALARM_ELC_ULS_INACTIVE_READY 						= 0xE2B,
	ALARM_ELC_FAIL24V_ACTIVE_READY 						= 0xE2C,
	ALARM_ELC_GDS_ACTIVE_READY 							= 0xE2D,
	ALARM_ELC_TRS_ACTIVE_READY 							= 0xE2E,
	ALARM_ELC_FAIL24V_ACTIVE_DOWNSTROKE 				= 0xE2F,
	ALARM_ELC_GDS_ACTIVE_DOWNSTROKE 					= 0xE30,
	ALARM_ELC_FAIL24V_ACTIVE_RETURNSTROKE 				= 0xE31,
	ALARM_ELC_GDS_ACTIVE_RETURNSTROKE 					= 0xE32,
	ALARM_ELC_ULS_ACTIVE_HOLD 							= 0xE33,
	ALARM_ELC_FAIL24V_ACTIVE_HOLD 						= 0xE34,
	ALARM_ELC_GDS_ACTIVE_HOLD 							= 0xE35,

	// Service reminder
	REMINDER_1	= 0xF01,
	REMINDER_2	= 0xF02,
	REMINDER_3	= 0xF03,
	REMINDER_4	= 0xF04,
	REMINDER_5	= 0xF05,
	REMINDER_6	= 0xF06,
	REMINDER_7	= 0xF07,
	REMINDER_8	= 0xF08,
	REMINDER_9	= 0xF09,
	REMINDER_10	= 0xF0A
}ALARM_IDS;

/* ENUM defined for Safety Fault alarm */
typedef enum 
{
	NO_ALARM                      					= 0x00000000,
	ALARM_LE_QEI_PHASE_ERROR						= 0x00000001, // 1 << 0
	ALARM_LE_READY_QEI_MIN_DISTANCE_LIMIT			= 0x00000002, // 1 << 1
	ALARM_LE_DRIVE_ON_QEI_POSITION_ERROR			= 0x00000004, // 1 << 2
	ALARM_LE_QEI_NOT_ZERO_POSITION					= 0x00000008, // 1 << 3
	ALARM_LE_QEI_ZERO_POSITION 						= 0x00000010, // 1 << 4
	ALARM_PB_BOTH_DRV_ACTIVE_SAMETIME				= 0x00000020, // 1 << 5
	ALARM_PB_EITHER_ONE_DRV_FAIL					= 0x00000040, // 1 << 6
	ALARM_PB_PB_PRESSED_POWER_UP					= 0x00000080, // 1 << 7
	ALARM_PB_ONE_OR_BOTH_PB_PRESSED_PREREADY 		= 0x00000100, // 1 << 8
	ALARM_PB_ONLY_ONE_PB_PRESSED_READY      		= 0x00000200, // 1 << 9
	ALARM_PB_TWO_HAND_TIMING_NOT_SATISFIED_READY 	= 0x00000400, // 1 << 10
	ALARM_PB_ONE_OR_BOTH_PB_RELEASED_DRIVEON		= 0x00000800, // 1 << 11
	ALARM_PB_STILL_PB_PRESSED_FAULT					= 0x00001000, // 1 << 12
	ALARM_UFAIL24_SIGNAL_ERROR						= 0x00002000, // 1 << 13
	ALARM_ESTOP_BUTTON_ERROR						= 0x00004000, // 1 << 14
	ALARM_ULS_SIGNAL_ERROR							= 0x00008000, // 1 << 15
	ALARM_SBEAM_FORCE_LIMIT							= 0x00010000, // 1 << 16
	ALARM_TRS_SIGNAL_ERROR							= 0x00020000, // 1 << 17
	ALARM_SVRELAY_RELAY_STATE_NOT_DRV				= 0x00040000, // 1 << 18
	ALARM_BOARD_MISMATCH							= 0x00080000, // 1 << 19
	ALARM_SONICS_EN_SIGNAL_ERROR					= 0x00100000, // 1 << 20
	ALARM_BIST_REGISTER_TEST_FAIL 					= 0x00200000, // 1 << 21
	ALARM_BIST_RAMSAFEAREA_TEST_FAIL				= 0x00400000, // 1 << 22
	ALARM_BIST_PC_TEST_FAIL 						= 0x00800000, // 1 << 23
	ALARM_BIST_RAMDATAAREA_TEST_FAIL 				= 0x01000000, // 1 << 24
	ALARM_BIST_ADC_TEST_FAIL 						= 0x02000000, // 1 << 25
	ALARM_BIST_RAMSTACKAREA_TEST_FAIL 				= 0x04000000, // 1 << 26
	ALARM_BIST_FLASH_TEST1_FAIL 					= 0x08000000, // 1 << 27
	ALARM_BIST_FLASH_TEST2_FAIL 					= 0x10000000, // 1 << 28
	ALARM_BIST_FLASH_TEST3_FAIL 					= 0x20000000, // 1 << 29
	ALARM_BIST_FLASH_TEST4_FAIL 					= 0x40000000, // 1 << 30
	ALARM_INCORRECT_STATUS							= 0x80000000  // 1 << 31
}SAFETY_FAULT_ALARM;

/* ENUM defined for AC alarm */
typedef enum{
    AC_NO_ALARM	                  	 = 0x00000000,
   	AC_VARIANT_DETECTION_FAIL        = 0x00000001,  // 1 << 0
   	AC_LINEAR_ENCODER_FAULT          = 0x00000002,  // 1 << 1
   	AC_PRESSURE_REGULATOR_FAULT      = 0x00000004,  // 1 << 2
  	AC_SAFETY_MICRO_FAULT            = 0x00000008,  // 1 << 3
   	AC_EEPROM_FAULT               	 = 0x00000010,  // 1 << 4
   	AC_INCORRECT_ASC_FRAME           = 0x00000020,  // 1 << 5
   	AC_ASC_TIMEOUT                   = 0x00000040,  // 1 << 6
	AC_GDS_ACTIVE_POWERUP 		  	 = 0x00000080,	// 1 << 7
	AC_ULS_INACTIVE_POWERUP		 	 = 0x00000100,	// 1 << 8
	AC_TRS_ACTIVE_POWERUP			 = 0x00000200,	// 1 << 9
	AC_ULS_INACTIVE_READY		 	 = 0x00000400,	// 1 << 10
	AC_FAIL24V_ACTIVE_READY	  	 	 = 0x00000800,	// 1 << 11
	AC_GDS_ACTIVE_READY		  	  	 = 0x00001000,	// 1 << 12
	AC_TRS_ACTIVE_READY 		 	 = 0x00002000,	// 1 << 13
	AC_FAIL24V_ACTIVE_DOWNSTROKE	 = 0x00004000,	// 1 << 14
	AC_GDS_ACTIVE_DOWNSTROKE	  	 = 0x00008000,	// 1 << 15
	AC_FAIL24V_ACTIVE_RETURNSTROKE	 = 0x00010000,	// 1 << 16
	AC_GDS_ACTIVE_RETURNSTROKE	  	 = 0x00020000,	// 1 << 17
	AC_ULS_ACTIVE_HOLD		 	 	 = 0x00040000,	// 1 << 18
	AC_FAIL24V_ACTIVE_HOLD		 	 = 0x00080000,	// 1 << 19
	AC_GDS_ACTIVE_HOLD		 	 	 = 0x00100000	// 1 << 20
}AC_ALARMS;

/* ENUM defined for different types of alarm that supported by system */
typedef enum
{
	ALARMTYPE_NONE          = -1, 
	TYPE_OVERLOAD 			= 0,
	TYPE_CYCLE_MODIFIED		= 0x300,
	TYPE_WARNING 			= 0x400,
	TYPE_PROCESS_LIMIT		= 0x500,
	TYPE_HARDWARE_FAILURE	= 0x600,
	TYPE_NOCYCLE			= 0x700,
	TYPE_NOCYCLE_OVERLOAD 	= 0x800,	
	TYPE_EN_FAULT			= 0xE00,
	TYPE_SERVICE_REMINDER	= 0xF00,
}ALARMTYPE;

/* ENUM defined for different sub-types of alarm that supported by system */
typedef enum
{
	ALARMSUBTYPE_NONE       = -1,
	OVERLOAD_WELD 			= 0x000,
	OVERLOAD_ENERGY_BRAKE 	= 0x010,
	OVERLOAD_AFTER_BURST 	= 0x020,
	OVERLOAD_POST_WELD_SEEK = 0x030,
	
	OVERLOAD_TEST 			= 0x040,
	OVERLOAD_PRE_TRIGGER	= 0x050,
	OVERLOAD_SEEK 			= 0x060,
	OVERLOAD_THERMAL		= 0x070,
	OVERLOAD_PRE_WELD_SEEK	= 0x080,
}ALARMSUBTYPE;

typedef enum
{
	ALARM_CONFIG_UPDATE_SUCCESS,
	ALARM_CONFIG_UPDATE_RESPONSE_UNKNOWN,
	ALARM_CONFIG_UPDATE_FAILURE
}ALARM_CONFIG_UPDATE_STATUS;

/* ENUM defined for alarm subcategories */
typedef enum
{
	NONE_SUBCAT,
	ALARM_SUBCAT,
	WARNING_SUBCAT,
	NOTIFICATION_SUBCAT,
	REMINDER_SUBCAT
}ALARM_SUBCATEGORY;

// Declaration of alarm log message
typedef struct AlarmLogEntry
{
	int             AlarmLogIndex;						/* Alarm log index */
    int		 		WeldRecipeNumber;                   /* Weld Recipe Number */
    int		    	WeldRecipeVersionNumber;            /* Weld Recipe Version Number */
    ALARM_IDS  		AlarmID;                            /* Alarm Identifier */
    ALARMTYPE    	AlarmType;                          /* Alarm type */
    ALARMSUBTYPE    AlarmSubType;                       /* Alarm sub type */
    int		 		CycleCounter;                       /* Weld cycle counter when alarm occurred. */
    char        	DateTime[DATE_SIZE_12_HR_FORMAT];         	/* Date & Time of Alarm */
    char       	 	MachineName[MACHINE_NAME_SIZE];     /* Machine name */
    char        	UserName[USER_NAME_SIZE];         	/* Current logged in username when alarm occurred. */
    char            AlarmNotes[ALARM_NOTES_SIZE];		/* Add notes to Alarms */
    
    AlarmLogEntry()
    {
    	AlarmLogIndex           = 0;
    	WeldRecipeNumber        = 0;
    	WeldRecipeVersionNumber = 0;
    	AlarmID                 = ALARM_NONE;
    	AlarmType               = ALARMTYPE_NONE;
    	AlarmSubType            = ALARMSUBTYPE_NONE;
    	CycleCounter            = 0;
    	memset(DateTime,    0, sizeof(DateTime));
    	memset(MachineName, 0, sizeof(MachineName));
    	memset(UserName,    0, sizeof(UserName));
    	memset(AlarmNotes,  0, sizeof(AlarmNotes));
    }
    
}__attribute__((packed)) AlarmLogEntry;

// Declaration of active alarm message
typedef struct ActiveAlarmEntry
{
	bool 		IsResetRequired; 		/* Is Alarm reset required */
	bool 		IsLogRequired; 			/* Is Alarm log required */
    ALARM_IDS	AlarmID;                /* Alarm Identifier */ 

    ActiveAlarmEntry()
    {
    	IsResetRequired	= false;
    	AlarmID			= ALARM_NONE;
    }    
}__attribute__((packed)) ActiveAlarmEntry;

// alarm configurable actions
typedef struct AlarmActions
{
	uint8_t  ResetRequired		: 	1;
	uint8_t  LogAlarm			: 	1; 
	uint8_t  GeneralAlarm		: 	1;
	uint8_t  CustomAlarmOutput	: 	1;
	uint8_t  CycleCounter		: 	1;
	uint8_t  Persistent			: 	1;
	uint8_t  Reserved			: 	2;
}__attribute__((packed)) AlarmActions,  * pAlarmActions;

// alarm configuration in configurable actions
typedef struct AlarmConfiguration
{
	AlarmActions  OverloadAlarmActions;
	AlarmActions  CycleModifiedAlarmActions;
	AlarmActions  WarningAlarmActions;	
	AlarmActions  SuspectAlarmActions;
	AlarmActions  RejectAlarmActions;	
	AlarmActions  NoCycleAlarmActions;
	AlarmActions  HardwareFailureAlarmActions;
	AlarmActions  NoCycleOverloadAlarmActions;	
}__attribute__((packed)) AlarmConfiguration;


typedef enum   {
    NO_CYCLE_RESET = 0,
    NO_CYCLE_LOG,
    NO_CYCLE_ALARM,
    NO_CYCLE_CUSTOM,
    NO_CYCLE_COUNT,

    HARD_FAIL_RESET,
    HARD_FAIL_LOG,
    HARD_FAIL_ALARM,
    HARD_FAIL_CUSTOM,
    HARD_FAIL_COUNT,

    CYCLE_MOD_RESET,
    CYCLE_MOD_LOG,
    CYCLE_MOD_ALARM,
    CYCLE_MOD_CUSTOM,
    CYCLE_MOD_COUNT,

    REJECT_RESET,
    REJECT_LOG,
    REJECT_ALARM,
    REJECT_CUSTOM,
    REJECT_COUNT,

    WARN_RESET,
    WARN_LOG,
    WARN_ALARM,
    WARN_CUSTOM,
    WARN_COUNT,

    OVERLOAD_RESET,
    OVERLOAD_LOG,
	OVERLOAD_GALARM,
    OVERLOAD_CUSTOM,
    OVERLOAD_COUNT,

    NO_CYCLE_OVER_RESET,
    NO_CYCLE_OVER_LOG,
    NO_CYCLE_OVER_ALARM,
    NO_CYCLE_OVER_CUSTOM,
    NO_CYCLE_OVER_COUNT,

    SUSPECT_RESET,
    SUSPECT_LOG,
    SUSPECT_ALARM,
    SUSPECT_CUSTOM,
    SUSPECT_COUNT

}ALARMNAMEENUM;

extern const std::map<ALARMNAMEENUM, std::string> AlarmActionsStringMap;
extern const std::map <ALARM_IDS, std::tuple<ALARM_SUBCATEGORY, std::string, std::string, std::string>> AlarmParamMap;

#endif /* ALARM_LOG_STRUCTURE_H_ */
